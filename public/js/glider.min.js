/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/glider.min.js":
/*!************************************!*\
  !*** ./resources/js/glider.min.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* @preserve\r\n    _____ __ _     __                _\r\n   / ___// /(_)___/ /___  ____      (_)___\r\n  / (_ // // // _  // -_)/ __/_    / /(_-<\r\n  \\___//_//_/ \\_,_/ \\__//_/  (_)__/ //___/\r\n                              |___/\r\n\r\n  Version: 1.7.3\r\n  Author: Nick Piscitelli (pickykneee)\r\n  Website: https://nickpiscitelli.com\r\n  Documentation: http://nickpiscitelli.github.io/Glider.js\r\n  License: MIT License\r\n  Release Date: October 25th, 2018\r\n\r\n*/\n!function (e) {\n   true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;\n}(function () {\n  var a = \"undefined\" != typeof window ? window : this,\n      e = a.Glider = function (e, t) {\n    var o = this;\n    if (e._glider) return e._glider;\n    if (o.ele = e, o.ele.classList.add(\"glider\"), (o.ele._glider = o).opt = Object.assign({}, {\n      slidesToScroll: 1,\n      slidesToShow: 1,\n      resizeLock: !0,\n      duration: .5,\n      easing: function easing(e, t, o, i, r) {\n        return i * (t /= r) * t + o;\n      }\n    }, t), o.animate_id = o.page = o.slide = 0, o.arrows = {}, o._opt = o.opt, o.opt.skipTrack) o.track = o.ele.children[0];else for (o.track = document.createElement(\"div\"), o.ele.appendChild(o.track); 1 !== o.ele.children.length;) {\n      o.track.appendChild(o.ele.children[0]);\n    }\n    o.track.classList.add(\"glider-track\"), o.init(), o.resize = o.init.bind(o, !0), o.event(o.ele, \"add\", {\n      scroll: o.updateControls.bind(o)\n    }), o.event(a, \"add\", {\n      resize: o.resize\n    });\n  },\n      t = e.prototype;\n\n  return t.init = function (e, t) {\n    var o = this,\n        i = 0,\n        r = 0;\n    o.slides = o.track.children, [].forEach.call(o.slides, function (e) {\n      e.classList.add(\"glider-slide\");\n    }), o.containerWidth = o.ele.clientWidth;\n    var s = o.settingsBreakpoint();\n\n    if (t = t || s, \"auto\" === o.opt.slidesToShow || void 0 !== o.opt._autoSlide) {\n      var l = o.containerWidth / o.opt.itemWidth;\n      o.opt._autoSlide = o.opt.slidesToShow = o.opt.exactWidth ? l : Math.floor(l);\n    }\n\n    \"auto\" === o.opt.slidesToScroll && (o.opt.slidesToScroll = Math.floor(o.opt.slidesToShow)), o.itemWidth = o.opt.exactWidth ? o.opt.itemWidth : o.containerWidth / o.opt.slidesToShow, [].forEach.call(o.slides, function (e) {\n      e.style.height = \"auto\", e.style.width = o.itemWidth + \"px\", i += o.itemWidth, r = Math.max(e.offsetHeight, r);\n    }), o.track.style.width = i + \"px\", o.trackWidth = i, o.isDrag = !1, o.preventClick = !1, o.opt.resizeLock && o.scrollTo(o.slide * o.itemWidth, 0), (s || t) && (o.bindArrows(), o.buildDots(), o.bindDrag()), o.updateControls(), o.emit(e ? \"refresh\" : \"loaded\");\n  }, t.bindDrag = function () {\n    var t = this;\n    t.mouse = t.mouse || t.handleMouse.bind(t);\n\n    function e() {\n      t.mouseDown = void 0, t.ele.classList.remove(\"drag\"), t.isDrag && (t.preventClick = !0), t.isDrag = !1;\n    }\n\n    var o = {\n      mouseup: e,\n      mouseleave: e,\n      mousedown: function mousedown(e) {\n        e.preventDefault(), e.stopPropagation(), t.mouseDown = e.clientX, t.ele.classList.add(\"drag\");\n      },\n      mousemove: t.mouse,\n      click: function click(e) {\n        t.preventClick && (e.preventDefault(), e.stopPropagation()), t.preventClick = !1;\n      }\n    };\n    t.ele.classList.toggle(\"draggable\", !0 === t.opt.draggable), t.event(t.ele, \"remove\", o), t.opt.draggable && t.event(t.ele, \"add\", o);\n  }, t.buildDots = function () {\n    var e = this;\n\n    if (e.opt.dots) {\n      if (\"string\" == typeof e.opt.dots ? e.dots = document.querySelector(e.opt.dots) : e.dots = e.opt.dots, e.dots) {\n        e.dots.innerHTML = \"\", e.dots.classList.add(\"glider-dots\");\n\n        for (var t = 0; t < Math.ceil(e.slides.length / e.opt.slidesToShow); ++t) {\n          var o = document.createElement(\"button\");\n          o.dataset.index = t, o.setAttribute(\"aria-label\", \"Page \" + (t + 1)), o.className = \"glider-dot \" + (t ? \"\" : \"active\"), e.event(o, \"add\", {\n            click: e.scrollItem.bind(e, t, !0)\n          }), e.dots.appendChild(o);\n        }\n      }\n    } else e.dots && (e.dots.innerHTML = \"\");\n  }, t.bindArrows = function () {\n    var o = this;\n    o.opt.arrows ? [\"prev\", \"next\"].forEach(function (e) {\n      var t = o.opt.arrows[e];\n      t && (\"string\" == typeof t && (t = document.querySelector(t)), t._func = t._func || o.scrollItem.bind(o, e), o.event(t, \"remove\", {\n        click: t._func\n      }), o.event(t, \"add\", {\n        click: t._func\n      }), o.arrows[e] = t);\n    }) : Object.keys(o.arrows).forEach(function (e) {\n      var t = o.arrows[e];\n      o.event(t, \"remove\", {\n        click: t._func\n      });\n    });\n  }, t.updateControls = function (e) {\n    var d = this;\n    e && !d.opt.scrollPropagate && e.stopPropagation();\n    var t = d.containerWidth >= d.trackWidth;\n    d.opt.rewind || (d.arrows.prev && d.arrows.prev.classList.toggle(\"disabled\", d.ele.scrollLeft <= 0 || t), d.arrows.next && d.arrows.next.classList.toggle(\"disabled\", Math.ceil(d.ele.scrollLeft + d.containerWidth) >= Math.floor(d.trackWidth) || t)), d.slide = Math.round(d.ele.scrollLeft / d.itemWidth), d.page = Math.round(d.ele.scrollLeft / d.containerWidth);\n    var c = d.slide + Math.floor(Math.floor(d.opt.slidesToShow) / 2),\n        h = Math.floor(d.opt.slidesToShow) % 2 ? 0 : c + 1;\n    1 === Math.floor(d.opt.slidesToShow) && (h = 0), d.ele.scrollLeft + d.containerWidth >= Math.floor(d.trackWidth) && (d.page = d.dots ? d.dots.children.length - 1 : 0), [].forEach.call(d.slides, function (e, t) {\n      var o = e.classList,\n          i = o.contains(\"visible\"),\n          r = d.ele.scrollLeft,\n          s = d.ele.scrollLeft + d.containerWidth,\n          l = d.itemWidth * t,\n          n = l + d.itemWidth;\n      [].forEach.call(o, function (e) {\n        /^left|right/.test(e) && o.remove(e);\n      }), o.toggle(\"active\", d.slide === t), c === t || h && h === t ? o.add(\"center\") : (o.remove(\"center\"), o.add([t < c ? \"left\" : \"right\", Math.abs(t - (t < c ? c : h || c))].join(\"-\")));\n      var a = Math.ceil(l) >= r && Math.floor(n) <= s;\n      o.toggle(\"visible\", a), a !== i && d.emit(\"slide-\" + (a ? \"visible\" : \"hidden\"), {\n        slide: t\n      });\n    }), d.dots && [].forEach.call(d.dots.children, function (e, t) {\n      e.classList.toggle(\"active\", d.page === t);\n    }), e && d.opt.scrollLock && (clearTimeout(d.scrollLock), d.scrollLock = setTimeout(function () {\n      clearTimeout(d.scrollLock), .02 < Math.abs(d.ele.scrollLeft / d.itemWidth - d.slide) && (d.mouseDown || d.scrollItem(d.round(d.ele.scrollLeft / d.itemWidth)));\n    }, d.opt.scrollLockDelay || 250));\n  }, t.scrollItem = function (e, t, o) {\n    o && o.preventDefault();\n    var i = this,\n        r = e;\n    if (++i.animate_id, !0 === t) e *= i.containerWidth, e = Math.round(e / i.itemWidth) * i.itemWidth;else {\n      if (\"string\" == typeof e) {\n        var s = \"prev\" === e;\n\n        if (e = i.opt.slidesToScroll % 1 || i.opt.slidesToShow % 1 ? i.round(i.ele.scrollLeft / i.itemWidth) : i.slide, s ? e -= i.opt.slidesToScroll : e += i.opt.slidesToScroll, i.opt.rewind) {\n          var l = i.ele.scrollLeft;\n          e = s && !l ? i.slides.length : !s && l + i.containerWidth >= Math.floor(i.trackWidth) ? 0 : e;\n        }\n      }\n\n      e = Math.max(Math.min(e, i.slides.length), 0), i.slide = e, e = i.itemWidth * e;\n    }\n    return i.scrollTo(e, i.opt.duration * Math.abs(i.ele.scrollLeft - e), function () {\n      i.updateControls(), i.emit(\"animated\", {\n        value: r,\n        type: \"string\" == typeof r ? \"arrow\" : t ? \"dot\" : \"slide\"\n      });\n    }), !1;\n  }, t.settingsBreakpoint = function () {\n    var e = this,\n        t = e._opt.responsive;\n\n    if (t) {\n      t.sort(function (e, t) {\n        return t.breakpoint - e.breakpoint;\n      });\n\n      for (var o = 0; o < t.length; ++o) {\n        var i = t[o];\n        if (a.innerWidth >= i.breakpoint) return e.breakpoint !== i.breakpoint && (e.opt = Object.assign({}, e._opt, i.settings), e.breakpoint = i.breakpoint, !0);\n      }\n    }\n\n    var r = 0 !== e.breakpoint;\n    return e.opt = Object.assign({}, e._opt), e.breakpoint = 0, r;\n  }, t.scrollTo = function (t, o, i) {\n    var r = this,\n        s = new Date().getTime(),\n        l = r.animate_id,\n        n = function n() {\n      var e = new Date().getTime() - s;\n      r.ele.scrollLeft = r.ele.scrollLeft + (t - r.ele.scrollLeft) * r.opt.easing(0, e, 0, 1, o), e < o && l === r.animate_id ? a.requestAnimationFrame(n) : (r.ele.scrollLeft = t, i && i.call(r));\n    };\n\n    a.requestAnimationFrame(n);\n  }, t.removeItem = function (e) {\n    var t = this;\n    t.slides.length && (t.track.removeChild(t.slides[e]), t.refresh(!0), t.emit(\"remove\"));\n  }, t.addItem = function (e) {\n    this.track.appendChild(e), this.refresh(!0), this.emit(\"add\");\n  }, t.handleMouse = function (e) {\n    var t = this;\n    t.mouseDown && (t.isDrag = !0, t.ele.scrollLeft += (t.mouseDown - e.clientX) * (t.opt.dragVelocity || 3.3), t.mouseDown = e.clientX);\n  }, t.round = function (e) {\n    var t = 1 / (this.opt.slidesToScroll % 1 || 1);\n    return Math.round(e * t) / t;\n  }, t.refresh = function (e) {\n    this.init(!0, e);\n  }, t.setOption = function (t, e) {\n    var o = this;\n    o.breakpoint && !e ? o._opt.responsive.forEach(function (e) {\n      e.breakpoint === o.breakpoint && (e.settings = Object.assign({}, e.settings, t));\n    }) : o._opt = Object.assign({}, o._opt, t), o.breakpoint = 0, o.settingsBreakpoint();\n  }, t.destroy = function () {\n    function e(t) {\n      t.removeAttribute(\"style\"), [].forEach.call(t.classList, function (e) {\n        /^glider/.test(e) && t.classList.remove(e);\n      });\n    }\n\n    var t = this,\n        o = t.ele.cloneNode(!0);\n    o.children[0].outerHTML = o.children[0].innerHTML, e(o), [].forEach.call(o.getElementsByTagName(\"*\"), e), t.ele.parentNode.replaceChild(o, t.ele), t.event(a, \"remove\", {\n      resize: t.resize\n    }), t.emit(\"destroy\");\n  }, t.emit = function (e, t) {\n    var o = new a.CustomEvent(\"glider-\" + e, {\n      bubbles: !this.opt.eventPropagate,\n      detail: t\n    });\n    this.ele.dispatchEvent(o);\n  }, t.event = function (e, t, o) {\n    var i = e[t + \"EventListener\"].bind(e);\n    Object.keys(o).forEach(function (e) {\n      i(e, o[e]);\n    });\n  }, e;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/glider.min.js\n");

/***/ }),

/***/ 7:
/*!******************************************!*\
  !*** multi ./resources/js/glider.min.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\www\flamma\resources\js\glider.min.js */"./resources/js/glider.min.js");


/***/ })

/******/ });